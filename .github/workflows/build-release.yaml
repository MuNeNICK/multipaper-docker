name: Build from Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      build_number:
        required: false
        type: string
        description: "Build number (e.g. 58). Required if not using auto-detection."
      server_jar_name:
        required: false
        type: string
        description: "Server JAR filename (e.g. multipaper-1.20.1-58.jar). Required if not using auto-detection."
      master_jar_name:
        required: false
        type: string
        description: "Master JAR filename (e.g. multipaper-master-1.20.1-58.jar). Required if not using auto-detection."
      master_tags:
        required: true
        type: string
      server_tags:
        required: true
        type: string

jobs:
  build_release:
    name: Build image from release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64,arm

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Resolve version & get URLs
        id: get_release
        shell: bash
        run: |
          set -eux

          VERSION_INPUT="${{ inputs.version }}"
          # Strip leading v if present
          VERSION_INPUT="${VERSION_INPUT#v}"
          
          # Check if this is a major version (e.g. 1.20) or full version (e.g. 1.20.1)
          if [[ "$VERSION_INPUT" =~ ^[0-9]+\.[0-9]+$ ]]; then
            echo "Major version detected: $VERSION_INPUT, finding latest minor version..."
            # Get available versions from API
            VERSIONS_RESPONSE=$(curl -sSL -H "Accept: application/json" "https://api.multipaper.io/v2/projects/multipaper/")
            
            # Extract matching versions for this major version
            MATCHING_VERSIONS=$(echo "$VERSIONS_RESPONSE" | jq -r --arg prefix "$VERSION_INPUT" '.versions[] | select(startswith($prefix))')
            
            if [[ -z "$MATCHING_VERSIONS" ]]; then
              echo "::error::No minor versions found for major version $VERSION_INPUT"
              echo "::error::Available versions: $(echo "$VERSIONS_RESPONSE" | jq -r '.versions | join(", ")')"
              exit 1
            fi
            
            # Sort versions and get the latest one
            FULL_VERSION=$(echo "$MATCHING_VERSIONS" | sort -V | tail -n 1)
            echo "Selected latest minor version: $FULL_VERSION"
          else
            # Already a full version
            FULL_VERSION="$VERSION_INPUT"
          fi
          
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_OUTPUT
          
          # Check if we have direct build info provided
          if [[ -n "${{ inputs.build_number }}" && -n "${{ inputs.server_jar_name }}" && -n "${{ inputs.master_jar_name }}" ]]; then
            BUILD="${{ inputs.build_number }}"
            APP_NAME="${{ inputs.server_jar_name }}"
            MASTER_NAME="${{ inputs.master_jar_name }}"
          else
            # Try to fetch version metadata
            echo "No direct build info provided, attempting to fetch from API..."
            RAW=$(curl -sSL -H "Accept: application/json" \
                  "https://api.multipaper.io/v2/projects/multipaper/versions/$FULL_VERSION")
            
            # Check if the version exists
            if [[ "$(echo "$RAW" | jq -r 'has("error")')" == "true" ]]; then
              ERROR_MSG=$(echo "$RAW" | jq -r '.error')
              echo "::error::Failed to fetch version $FULL_VERSION: $ERROR_MSG"
              echo "::error::Please check available versions at https://multipaper.io/download.html"
              echo "::error::Alternatively, provide build_number, server_jar_name and master_jar_name as inputs"
              exit 1
            fi
            
            # Extract the latest build number from the builds array
            BUILD=$(echo "$RAW" | jq -r '.builds | sort | last')
            
            # Check if we got a valid build number
            if [[ -z "$BUILD" ]] || [[ "$BUILD" == "null" ]]; then
              echo "::error::Failed to extract build number from API response"
              echo "::error::API returned: $RAW"
              exit 1
            fi
            
            echo "Found latest build number: $BUILD"
            
            # Construct JAR filenames based on version and build
            APP_NAME="multipaper-${FULL_VERSION}-${BUILD}.jar"
            MASTER_NAME="multipaper-master-${FULL_VERSION}-${BUILD}.jar"
            
            echo "Constructed server JAR name: $APP_NAME"
            echo "Constructed master JAR name: $MASTER_NAME"
          fi

          # Output URLs
          echo "MULTIPAPER_URL=https://api.multipaper.io/v2/projects/multipaper/versions/$FULL_VERSION/builds/$BUILD/downloads/$APP_NAME" >> $GITHUB_OUTPUT
          echo "MULTIPAPER_MASTER_URL=https://api.multipaper.io/v2/projects/multipaper/versions/$FULL_VERSION/builds/$BUILD/downloads/$MASTER_NAME" >> $GITHUB_OUTPUT

      - name: Normalize image tags to lowercase
        id: normalize_tags
        shell: bash
        run: |
          echo "MASTER_TAG=$(echo '${{ inputs.master_tags }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "SERVER_TAG=$(echo '${{ inputs.server_tags }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: releases/Dockerfile
          push: false
          load: false
          target: base
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: |
            type=gha,scope=release-base
          cache-to: |
            type=gha,scope=release-base,mode=max

      - name: Build multipaper-master ${{ inputs.version }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: releases/Dockerfile
          push: true
          tags: ${{ steps.normalize_tags.outputs.MASTER_TAG }}
          target: master
          build-args: |
            RELEASE_URL=${{ steps.get_release.outputs.MULTIPAPER_MASTER_URL }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: |
            type=gha,scope=release-master-${{ inputs.version }}
            type=gha,scope=release-base
          cache-to: |
            type=gha,scope=release-master-${{ inputs.version }},mode=max

      - name: Build multipaper ${{ inputs.version }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: releases/Dockerfile
          push: true
          tags: ${{ steps.normalize_tags.outputs.SERVER_TAG }}
          target: server
          build-args: |
            RELEASE_URL=${{ steps.get_release.outputs.MULTIPAPER_URL }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: |
            type=gha,scope=release-server-${{ inputs.version }}
            type=gha,scope=release-base
          cache-to: |
            type=gha,scope=release-server-${{ inputs.version }},mode=max
